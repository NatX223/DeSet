import { ethers } from "ethers";
import { Database, helpers } from "@tableland/sdk";
import { routerABI } from "./RouterABI";
import { formABI } from "./formABI";
import { controllerABI } from "./controllerABI";
import axios from 'axios';
import { Web3Storage } from "web3.storage";
import { marketABI } from "./marketplaceABI";

require("dotenv").config();

const bytecode = ""; // update bytecode

const controllerBytecode = "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f7b806100616000396000f3fe6080604052600436106100555760003560e01c80633791dc6a1461005a57806366df322e1461008a57806369fe0e2d146100ba5780638da5cb5b146100e3578063d97cd55f1461010e578063ddca3f4314610137575b600080fd5b610074600480360381019061006f91906105e5565b610162565b6040516100819190610816565b60405180910390f35b6100a4600480360381019061009f919061086e565b61016f565b6040516100b19190610816565b60405180910390f35b3480156100c657600080fd5b506100e160048036038101906100dc91906108ae565b610364565b005b3480156100ef57600080fd5b506100f86103c8565b60405161010591906108ea565b60405180910390f35b34801561011a57600080fd5b5061013560048036038101906101309190610b64565b6103ee565b005b34801561014357600080fd5b5061014c610531565b6040516101599190610bcf565b60405180910390f35b61016a610537565b600080fd5b610177610537565b60005434146101bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b290610c47565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102b9576040518060c00160405280600115158152602001600115158152602001600115158152602001604051806020016040528060008152508152602001604051806020016040528060008152508152602001600067ffffffffffffffff81111561027b5761027a61090a565b5b6040519080825280602002602001820160405280156102ae57816020015b60608152602001906001900390816102995790505b50815250905061035e565b6040518060c00160405280600115158152602001600115158152602001600115158152602001604051806020016040528060008152508152602001604051806020016040528060008152508152602001600067ffffffffffffffff8111156103245761032361090a565b5b60405190808252806020026020018201604052801561035757816020015b60608152602001906001900390816103425790505b5081525090505b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103be57600080fd5b8060008190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044857600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548160ff02191690831515021790555060608201518160010190816104fd9190610e73565b5060808201518160020190816105139190610e73565b5060a08201518160030190816105299190610e73565b509050505050565b60005481565b6040518060c001604052806000151581526020016000151581526020016000151581526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b282610587565b9050919050565b6105c2816105a7565b81146105cd57600080fd5b50565b6000813590506105df816105b9565b92915050565b6000602082840312156105fb576105fa61057d565b5b6000610609848285016105d0565b91505092915050565b60008115159050919050565b61062781610612565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561066757808201518184015260208101905061064c565b60008484015250505050565b6000601f19601f8301169050919050565b600061068f8261062d565b6106998185610638565b93506106a9818560208601610649565b6106b281610673565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006106f58383610684565b905092915050565b6000602082019050919050565b6000610715826106bd565b61071f81856106c8565b935083602082028501610731856106d9565b8060005b8581101561076d578484038952815161074e85826106e9565b9450610759836106fd565b925060208a01995050600181019050610735565b50829750879550505050505092915050565b600060c083016000830151610797600086018261061e565b5060208301516107aa602086018261061e565b5060408301516107bd604086018261061e565b50606083015184820360608601526107d58282610684565b915050608083015184820360808601526107ef8282610684565b91505060a083015184820360a0860152610809828261070a565b9150508091505092915050565b60006020820190508181036000830152610830818461077f565b905092915050565b6000819050919050565b61084b81610838565b811461085657600080fd5b50565b60008135905061086881610842565b92915050565b600080604083850312156108855761088461057d565b5b6000610893858286016105d0565b92505060206108a485828601610859565b9150509250929050565b6000602082840312156108c4576108c361057d565b5b60006108d284828501610859565b91505092915050565b6108e4816105a7565b82525050565b60006020820190506108ff60008301846108db565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61094282610673565b810181811067ffffffffffffffff821117156109615761096061090a565b5b80604052505050565b6000610974610573565b90506109808282610939565b919050565b600080fd5b61099381610612565b811461099e57600080fd5b50565b6000813590506109b08161098a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156109db576109da61090a565b5b6109e482610673565b9050602081019050919050565b82818337600083830152505050565b6000610a13610a0e846109c0565b61096a565b905082815260208101848484011115610a2f57610a2e6109bb565b5b610a3a8482856109f1565b509392505050565b600082601f830112610a5757610a566109b6565b5b8135610a67848260208601610a00565b91505092915050565b600060c08284031215610a8657610a85610905565b5b610a9060c061096a565b90506000610aa0848285016109a1565b6000830152506020610ab4848285016109a1565b6020830152506040610ac8848285016109a1565b604083015250606082013567ffffffffffffffff811115610aec57610aeb610985565b5b610af884828501610a42565b606083015250608082013567ffffffffffffffff811115610b1c57610b1b610985565b5b610b2884828501610a42565b60808301525060a082013567ffffffffffffffff811115610b4c57610b4b610985565b5b610b5884828501610a42565b60a08301525092915050565b60008060408385031215610b7b57610b7a61057d565b5b6000610b89858286016105d0565b925050602083013567ffffffffffffffff811115610baa57610ba9610582565b5b610bb685828601610a70565b9150509250929050565b610bc981610838565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b600082825260208201905092915050565b7f7061792066656520746f20696e73657274000000000000000000000000000000600082015250565b6000610c31601183610bea565b9150610c3c82610bfb565b602082019050919050565b60006020820190508181036000830152610c6081610c24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610cae57607f821691505b602082108103610cc157610cc0610c67565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610cec565b610d338683610cec565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d70610d6b610d6684610838565b610d4b565b610838565b9050919050565b6000819050919050565b610d8a83610d55565b610d9e610d9682610d77565b848454610cf9565b825550505050565b600090565b610db3610da6565b610dbe818484610d81565b505050565b5b81811015610de257610dd7600082610dab565b600181019050610dc4565b5050565b601f821115610e2757610df881610cc7565b610e0184610cdc565b81016020851015610e10578190505b610e24610e1c85610cdc565b830182610dc3565b50505b505050565b600082821c905092915050565b6000610e4a60001984600802610e2c565b1980831691505092915050565b6000610e638383610e39565b9150826002028217905092915050565b610e7c8261062d565b67ffffffffffffffff811115610e9557610e9461090a565b5b610e9f8254610c96565b610eaa828285610de6565b600060209050601f831160018114610edd5760008415610ecb578287015190505b610ed58582610e57565b865550610f3d565b601f198416610eeb86610cc7565b60005b82811015610f1357848901518255600182019150602085019450602081019050610eee565b86831015610f305784890151610f2c601f891682610e39565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220f6b3dcc35ac6b7418671dedc92e9dd62a6e853d95b1c3559cbd969d8e5cac92164736f6c63430008120033"

// Connect to the database
const db = new Database();

var provider;
var signer;

const routerContractAddress = "0x2AF7341E4387e9bD2D02Dc72236af7fa6C16A6C9";

const marketplaceContractAddress = "0xEBB01Dfdb8061dD019E2bE31d689C1c6D2bf7F27";
const registryAddress = "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68";

// export const connectWallet = async () => {
//     provider = new ethers.BrowserProvider(window.ethereum);
  
//     await provider.send("eth_requestAccounts", []);
  
//     signer = await provider.getSigner();
  
//     console.log(signer);
// }

export const connectWallet = async() => {
  // provider = new ethers.BrowserProvider(window.ethereum);
  try {
      if (window.lukso) { // connecting to UP extension instead of metamask
          provider = new ethers.BrowserProvider(window.lukso);
          await provider.send("eth_requestAccounts", []);
          signer = await provider.getSigner();
      } else if(window.ethereum) { // in case of no UP extension use metamask
          provider = new ethers.BrowserProvider(window.ethereum);
          const currentNetwork = await provider.getNetwork();
          const _currentNetworkId = currentNetwork.chainId;
          const currentNetworkId = Number(_currentNetworkId);
          if (currentNetworkId === 4201) { // checking if the network is available on the wallet
              await provider.send("eth_requestAccounts", []);
              signer = await provider.getSigner();
          } else {
              const switchLuksoTestnet = {
                  chainId: '4201',
              }
              try {
                  await ethereum.request({
                      method: 'wallet_switchEthereumChain',
                      params: [{ chainId: '4201' }],
                  });
                  await provider.send("eth_requestAccounts", []);
                  signer = await provider.getSigner();
              } catch (switchError) {
                  if (switchError.code === 4902) {
                      try {
                          await ethereum.request({
                              method: 'wallet_addEthereumChain',
                              params: [
                                  {
                                    chainId: '4201',
                                    chainName: 'LUKSO testnet',
                                    rpcUrls: ['https://rpc.testnet.lukso.network'],
                                  },
                                ],
                          });
                          await ethereum.request({
                              method: 'wallet_switchEthereumChain',
                              params: [{ chainId: '4201' }],
                          });
                          await provider.send("eth_requestAccounts", []);
                          signer = await provider.getSigner();
                      } catch (error) {
                          console.log(error);
                      }
                  } else {
                      console.log(switchError);
                  }
              }
              await window.ethereum.request({
                  method: 'wallet_switchEthereumChain',
                  params: [{ chainId: luksoTestnet.chainId }],
                });
          }
      }
      else {
          return("No wallet installed");
      }
  } catch (error) {
      console.error(error);
  }
}

export const getUser = () => {
    return [provider, signer];
}

export const getUserAddress = async () => {
    const address = await signer.address;
    return address;
}

function getInputs(questions, inputTypes) {
    const modifiedQuestions = questions.map((question, i) => {
        const modifiedQuestion = question.replace(/\s/g, '_');
        const inputType = inputTypes[i];
        return `${modifiedQuestion}${inputType}`;
    });
  
    const modifiedInputTypes = inputTypes.map((inputType) => {
      // Change "file" to "text"
      if (inputType === "file") {
        return "text";
      }
      // Change "number" to "integer"
      else if (inputType === "number") {
        return "integer";
      }
      // Leave other input types unchanged
      else {
        return inputType;
      }
    });
  
    return [modifiedQuestions, modifiedInputTypes];
}

function concatCreationArray(fields, types) {
    if (fields.length !== types.length) {
      throw new Error('Fields and types arrays must have the same length');
    }
  
    let queryString = '';
  
    for (let i = 0; i < fields.length; i++) {
      if (i === fields.length - 1) {
        queryString += `${fields[i]} ${types[i]}`;
      } else {
        queryString += `${fields[i]} ${types[i]},`;
      }
    }
  
    return queryString;
}

function concatWriteArray(fields) {
    let queryString = '';
    
    for (let i = 0; i < fields.length; i++) {
      if (i === fields.length - 1) {
        queryString += fields[i];
      } else {
        queryString += fields[i] + ',';
      }
    }
    
    return queryString;
}

const create = async (_questions, _inputTypes, _name, details,  contractAddress) => { // add the fee and reward feature
    const [questions, inputTypes] = getInputs(_questions, _inputTypes);
    // construct contract
    const formContract = new ethers.Contract(contractAddress, formABI, signer);
    // get create string
    const createString = concatCreationArray(questions, inputTypes);
    const writeString = concatWriteArray(questions);
    const name = _name.replace(/\s/g, '_');
    // call function to create table
    const tx = await formContract.createTable(name, createString, details, writeString);
    const receipt = await tx.wait();
    console.log(name, writeString);
    return[receipt, name];
}

const deploy = async () => {
  const ControllerInstance = new ethers.ContractFactory(controllerABI, controllerBytecode, signer);
  const controllerInstance = await ControllerInstance.deploy();
  const controllerAddress = await controllerInstance.getAddress();

  const ContractInstance = new ethers.ContractFactory(formABI, bytecode, signer);
  const contractInstance = await ContractInstance.deploy(routerContractAddress, controllerAddress, registryAddress, marketplaceContractAddress);

  const contractAddress = await contractInstance.getAddress();

  console.log(contractAddress);
  return [contractAddress, controllerAddress];
}

export const createForm = async (_questions, _inputTypes, name, details, _fee) => {
    await connectWallet();
    let receipt;
    let formName;
    let newContractAddress;
    let controllerAddress;

    const routerContract = new ethers.Contract(routerContractAddress, routerABI, signer);
    const userAddress = await getUserAddress();
    const _userAddress = userAddress.toString();
    const contractAddress = await routerContract.getContract(_userAddress);

    if (contractAddress == '0x0000000000000000000000000000000000000000') {
        [newContractAddress, controllerAddress] = await deploy();
        const controllerContract = new ethers.Contract(controllerAddress, controllerABI, signer);
        const fee = ethers.parseEther(_fee);
        await controllerContract.setFee(fee);
        [receipt, formName] = await create(_questions, _inputTypes, name, details, newContractAddress);
        console.log(receipt);
        return formName;
    } else {
      const formContract = new ethers.Contract(contractAddress, formABI, signer);
      const controllerAddress = await formContract.controllerContract();
      const controllerContract = new ethers.Contract(controllerAddress, controllerABI, signer);
      const fee = ethers.parseEther(_fee.toString());
      await controllerContract.setFee(fee);
        [receipt, formName] = await create(_questions, _inputTypes, name, details, contractAddress);
        console.log(receipt);
        return formName;
    }
}

function processInputString(inputString) {
  // Split the input string by ","
  const parts = inputString.split(',');

  // Define a regular expression to match "text", "number", or "file" at the end of a word
  const regex = /(text|number|file)$/;

  // Initialize the result array
  const result = [];

  // Process each part
  for (const part of parts) {
      // Remove "_" and convert to lowercase
      const cleanedPart = part.replace(/_/g, ' ').toLowerCase();

      // Check if the cleaned part ends with "text", "number", or "file"
      const match = cleanedPart.match(regex);

      if (match) {
          // Extract the question by removing the matched suffix
          const question = cleanedPart.replace(match[0], '').trim();

          // Create an object and push it to the result array
          result.push({ question, inputType: match[0] });
      }
  }

  return result;
}

// create function to get a form
// get table contract and id using tableName(get TableName from search params)
// construct contract
// get questions and by types by separating the question from the '(inputType)' get them and concat to arrays then return them
export const getForm = async (tableName) => {
    let _tableName;
    let formContractAddress;
    let _tableId;
    let formOwner;
    let tableId;
    let tableDescription;
    let _columns;
    let responseCount;
    const alchemyProvider = new ethers.JsonRpcProvider("https://polygon-mumbai.g.alchemy.com/v2/4sKDiSJ0nsbJMKVcLjQALWBsrLroi5Sk")
    
    const routerContract = new ethers.Contract(routerContractAddress, routerABI, alchemyProvider);
    [_tableId, formContractAddress, formOwner] = await routerContract.getTable(tableName);
    const formContract = new ethers.Contract(formContractAddress, formABI, alchemyProvider);
    [tableId, _tableName, tableDescription, _columns, responseCount] = await formContract.getTable(_tableId);

    const tableName_ = _tableName.replace(/_/g, ' ');
    const formInfo = [tableName_, tableDescription]
    const questions = processInputString(_columns);
    console.log(questions, formInfo);
    return [questions, formInfo];
}

export const storeFiles = async (files) => {
  try {
    const apiToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweEU2YTk4NDRCNWZGYjg3NzhkRGZEYTc3RkJiQzhmRjI1ODk4MzFFYTUiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2OTU2MzUwMTMyOTcsIm5hbWUiOiJEZUZvcm0ifQ.pjouYwZNbsvuI088BsweD-0v8lhwP-DqYPQsYVaXfHU"; 
    const client = new Web3Storage({ token: apiToken });
    const cid = await client.put(files);
    console.log("stored files with cid:", cid);
    console.log(cid);
    return cid;
  } catch (error) {
    console.log(error);
  }
}

// create function to get responses from users
const getResponse = async (array) => {
    const responses = [];
    // run through the array to check if the answer is a file
    for (const item of array) {
        let response;
        console.log(item)
        console.log(item.answer.constructor)
        console.log(item.answer instanceof File)
        if (typeof item.answer === 'number') {
            response = item.answer.toString();
        } else {
            response = item.answer;
        }
        responses.push(response);
    }
    console.log(responses);
    return responses
}

export const submitForm = async (tableName, _responses) => {
  let tableId;
  let formContractAddress;
  let formOwner;
  // const gasLimit = 300000;
  // const gasPriceInWei = ethers.parseUnits('25', 'gwei');
  await connectWallet();
  const responses = await getResponse(_responses);
  const routerContract = new ethers.Contract(routerContractAddress, routerABI, signer);
  [tableId, formContractAddress, formOwner] = await routerContract.getTable(tableName);
  const formContract = new ethers.Contract(formContractAddress, formABI, signer);
  const controllerAddress = await formContract.controllerContract();
  const controllerContract = new ethers.Contract(controllerAddress, controllerABI, signer);
  const fee = await controllerContract.fee();
  const tx = await formContract.writeTable(tableId, responses,
  {value: fee})
  const receipt = await tx.wait();
  console.log(receipt, responses, controllerAddress);
}

export const shortenUrl = async (longUrl) => {
  const bitlyAccessToken = "a8bedc3b5fde1d3b1f381b54c169ac09187ecd13";

  try {
    const response = await axios.post(
      'https://api-ssl.bitly.com/v4/shorten',
      {
        long_url: longUrl,
        domain: 'bit.ly', // You can specify a custom domain if you have one
      },
      {
        headers: {
          Authorization: `Bearer ${bitlyAccessToken}`,
        },
      }
    );

    return response.data.link;
  } catch (error) {
    console.error('Error shortening URL:', error);
    throw error;
  }
}

const trimForm = async (arr) => {
  // Check if the array has at least 4 elements
  if (arr.length >= 4) {
    // Create a new array by filtering out the element at index 3 (4th element)
    return arr.filter((_, index) => index !== 3);
  }
  return arr;
}

// function to return all forms of a user
export const getUserForms = async (formOwner) => {
  const resultArray = [];

  try {
    const alchemyProvider = new ethers.JsonRpcProvider("https://polygon-mumbai.g.alchemy.com/v2/4sKDiSJ0nsbJMKVcLjQALWBsrLroi5Sk");

    const routerContract = new ethers.Contract(routerContractAddress, routerABI, alchemyProvider);

    const userContract = await routerContract.getContract(formOwner);
    const formContract = new ethers.Contract(userContract, formABI, alchemyProvider);

    const _tableCount = await formContract.getCount();
    const tableIndex = Number(_tableCount);

    for (let index = 0; index < tableIndex; index++) {
      const _table = await formContract.getTable(index);
      const table = await trimForm(_table);
      resultArray.push(table);
    }
    console.log(resultArray);
    return resultArray;
  } catch (error) {
    console.error('Error shortening URL:', error);
    throw error;
  }
}

export const getResponses = async (params) => {
  let id;
  let address;
  let responses;
  let details;
  let userContract;
  [id, address] = splitString(params);

  [responses, details, userContract] = await getDetails(id, address);
  console.log(responses, details);
  return [responses, details, userContract];
}

// split the params
export function splitString(inputString) {
  const parts = inputString.split('0x');
  if (parts.length === 2) {
    const firstPart = parseInt(parts[0], 16); // Convert the first part to a number
    const secondPart = '0x' + parts[1]; // Keep the second part as a string
    return [firstPart, secondPart];
  } else {
    // Handle invalid input
    return null;
  }
}

async function getDetails(id, address) {
  let _tableName;
  let tableDescription;
  let tableId;
  let columns;
  let responseCount;
  const alchemyProvider = new ethers.JsonRpcProvider("https://polygon-mumbai.g.alchemy.com/v2/4sKDiSJ0nsbJMKVcLjQALWBsrLroi5Sk")
  const routerContract = new ethers.Contract(routerContractAddress, routerABI, alchemyProvider);

  const userContract = await routerContract.getContract(address);
  const formContract = new ethers.Contract(userContract, formABI, alchemyProvider);
  [tableId, _tableName, tableDescription, columns, responseCount] = await formContract.getTable(id);
  const tableName = _tableName.replace(/_/g, ' ');
  const details = [tableName, tableDescription];
  const tablelandName = await formContract.getTableName(id);
  const _responses = await db.prepare(`SELECT * FROM ${tablelandName};`).all();
  const responses = _responses.results;
  return [responses, details, userContract];
}

export const getFormsForSale = async () => {
  const resultArray = [];
  // get counter
  try {
    const alchemyProvider = new ethers.JsonRpcProvider("https://polygon-mumbai.g.alchemy.com/v2/4sKDiSJ0nsbJMKVcLjQALWBsrLroi5Sk");

    const marketplaceContract = new ethers.Contract(marketplaceContractAddress, marketABI, alchemyProvider);

    const _itemCount = await marketplaceContract.getCount();
    const itemCount = Number(_itemCount);

    for (let i = 0; i < itemCount; i++) {
      const item = await marketplaceContract.getDataset(i);
      resultArray.push(item) 
    }
    console.log(resultArray);
    return resultArray;
  } catch (error) {
    console.error('Error shortening URL:', error);
    throw error;
  }
}

export const listDataset = async (id, formAddress) => {
  await connectWallet();
  const price = ethers.parseEther("0.001");
  const formContract = new ethers.Contract(formAddress, formABI, signer);
  const tx = await formContract.listTable(id, price);
  const receipt = await tx.wait();
  console.log(receipt);
}

export const buyDataset = async (id) => {
    await connectWallet();
    const marketplaceContract = new ethers.Contract(marketplaceContractAddress, marketABI, signer);
    const tx = await marketplaceContract.buyDataset(id);
    const receipt = await tx.wait();
    console.log(receipt);
}